# - A identação no python é importante para determinar onde um bloco de comando inicia e onde ele termina;
# Exemplo
# def sacar(valor):
#     saldo = 100;
#     if saldo >= valor:
#         saldo -= valor
#         print("Valor sacado");
#         print("Saldo atual: ", saldo);
#     else:
#         print("Saldo insuficiente");
#         print("Saldo atual: ", saldo);
        
# sacar(100);

# def depositar(valor):
#     saldo = 100;
    
#     saldo += valor;
#     print("=======================================================")
#     print("Valor depositado");
#     print("Saldo atual: ", saldo);

# depositar(200);

# --------------------------------------------------------------------------
# Condicionais:
    
# MAIOR_IDADE = 18;

# idade = int(input("Digite sua idade: "));
    
# if idade >= MAIOR_IDADE:
#     print("Você é maior de idade");
# else:
#     print("Você é menor de idade");
# -----------------------------------------'---------------------------------
# Laços de repetição:
    
# lista = ["1","2","3","4","5","6","7","8","9","10"];

# def percorrerLista():
#     for i in lista:
#         print(i);
        
# percorrerLista();
# # --------------------------------------------------------------------------
# # Range function
# # - A função range() em Python é usada para gerar uma sequência de números. Ele retorna um objeto de sequência que produz uma série de inteiros consecutivos. A sintaxe geral é: range(start, stop, step)
# # - start: O número inteiro que especifica em que posição começar. O padrão é 0.
# # - stop: O número inteiro que especifica em que posição terminar.
# # - step: O número inteiro que especifica o incremento. O padrão é 1.

# for i in range(0,51,5):
#     print(i);
# # --------------------------------------------------------------------------
# Manipulando strings em Python:
# curso = "           Python        "
# print(curso.strip()) # Remove espaços em branco tanto da esquerda quanto da direita
# # resultado = "Python"

# print(curso.lstrip()) # Remove espaços em branco da esquerda
# # resultado = "Python        "

# print(curso.rstrip()) # Remove espaços em branco da direita
# #resultado = "           Python"

# print(curso.find("thon")) # Retorna a posição da primeira ocorrência da palavra
# # resultado = 4

# print(curso.replace("Python", "Java")) # Substitui a palavra Python por Java,
# # resultado = "Java"

# print("Python" in curso) # Retorna True se a palavra Python estiver na string
# # resultado = True

# print("Python" not in curso) # Retorna True se a palavra Python não estiver na string
# # resultado = False

# print(len(curso)) # Retorna o tamanho da string
# # resultado = 23

# print(curso.lower()) # Converte a string para minúsculas
# # resultado = "python"

# print(curso.upper()) # Converte a string para maiúsculas
# # resultado = "PYTHON"

# print(curso.capitalize()) # Converte a primeira letra da string para maiúscula
# # resultado = "Python"

# print(curso.title()) # Converte a primeira letra de cada palavra para maiúscula
# # resultado = "Python"

# print(curso.center(20, "-")) # Centraliza a string em um campo de 20 caracteres preenchido com hífens
# # resultado = "------Python-------"

# print(curso.ljust(20, "-")) # Alinha a string à esquerda em um campo de 20 caracteres preenchido com hífens
# # resultado = "Python------------"

# print(curso.rjust(20, "-")) # Alinha a string à direita em um campo de 20 caracteres preenchido com hífens
# # resultado = "------------Python"

# print(curso.split()) # Divide a string em uma lista
# # resultado = ["Python"]

# print(curso.split("t")) # Divide a string em uma lista a partir da letra t
# # resultado = ["Py", "hon"]

# print(".".join(curso)) # Junta todos os elementos da lista em uma string
# # resultado = "P.y.t.h.o.n"

# print(curso[::-1]) # Inverte a string                                                          
# # resultado = "nohtyP"

# print("".join(reversed(curso))) # Inverte a string
# # resultado = "nohtyP"

# print(curso.count("t")) # Conta quantas vezes a letra t aparece na string
# # resultado = 1

# print(curso.startswith("P")) # Retorna True se a string começa com a letra P
# # resultado = True

# print(curso.endswith("n")) # Retorna True se a string termina com a letra n
# # resultado = True

# print(curso.isalnum()) # Retorna True se a string só contém números e letras
# # resultado = False

# print(curso.isalpha()) # Retorna True se a string só contém letras
# # resultado = True

# print(curso.isnumeric()) # Retorna True se a string só contém números
# # resultado = False

# print(curso.isspace()) # Retorna True se a string só contém espaços em branco
# # resultado = False

# print(curso.istitle()) # Retorna True se a string segue as regras de um título
# # resultado = True

# print(curso.isupper()) # Retorna True se a string está em maiúsculas
# # resultado = False

# print(curso.islower()) # Retorna True se a string está em minúsculas
# # resultado = False

# print(curso.swapcase()) # Inverte a string
# # resultado = "pYTHON"

# print(curso.zfill(20)) # Preenche a string com zeros à esquerda
# # resultado = "0000000000000Python"
# --------------------------------------------------------------------------
# Interpolando
# Exemplo 1
# nome = "Wesley"
# idade = 20
# print(f"O nome é {nome} e a idade é {idade}")
# # resultado = "O nome é Wesley e a idade é 20"

# Exemplo 2
# nome = "Wesley"
# idade = 20
# print("O nome é {} e a idade é {}".format(nome, idade))
# # resultado = "O nome é Wesley e a idade é 20"

# Exemplo 3
# nome = "Wesley"
# idade = 20
# print("O nome é {0} e a idade é {1}".format(nome, idade))
# # resultado = "O nome é Wesley e a idade é 20"

# Exemplo 4

# nome = "Wesley"
# idade = 20
# print("O nome é {nome} e a idade é {idade}".format(nome=nome, idade=idade))
# # resultado = "O nome é Wesley e a idade é 20"

# Exemplo 5

# nome = "Wesley"
# idade = 20
# print("O nome é %s e a idade é %d" % (nome, idade))
# # resultado = "O nome é Wesley e a idade é 20"
# --------------------------------------------------------------------------
# Fatiamento de string
# curso = "Python"
# print(curso[0]) # Retorna o caractere na posição 0
# # resultado = "P"
# --------------------------------------------------------------------------
# String multiplas linhas
# curso = '''Programação
# em
# Python
# print(curso)
# # resultado = "Programação
# # em
# # Python"
# --------------------------------------------------------------------------
# Listas
# lista = [1,2,3]
# lista2 = [4,5,6]

# lista.copy(); # ELe vai copiar a lista
# lista.extend(lista2);
# lista.index("2") # retorna 1 pela posição do 2 na lista
# lista.pop(); # Ele vai tirar o ultimo elemento da pilha mas tambem conseguimos passar um indice
# lista.remove() # Outra forma de remover o elemento da lista
# Ele vai tirar o primeito elemento da fila -> lista.pop(0)
# lista.reverse() # Coloca a lista ao contrario, 123 vira 321
# lista.sort() # Ordenação padrão
# lista.sort(reverse=True) # 
# lista.sort(key=lambda x: len(x)) # Ele vai ordenar por tamanho, do menor para o maior (caracteres) ASC
# lista.sort(key=lambda x: len(x), reverse=True) # faz o mesmo mas o inverso, do maior para o menor DESC
# --------------------------------------------------------------------------
Tuplas
# - As tuplas são semelhantes às listas, mas com uma diferença fundamental: as tuplas são imutáveis. Isso significa que, uma vez que uma tupla é criada, não podemos adicionar, remover ou alterar itens. 
As tuplas são usadas para armazenar vários itens em uma única variável.
frutas = ("laranja","banana","uva")
letras = tuple("python")
numeros = tuple([1,2,3,4])
pais = ("Brasil",)
pra exibir é a mesma coisa de qualquer lista ou String
# --------------------------------------------------------------------------
Conjuntos
# - Um conjunto é uma coleção desordenada de itens. Os conjuntos são usados para armazenar vários itens em uma única variável.
# set é uma coleção que não possui objetos repetidos, usamos sets para representar conjuntos matemáticos ou elimar itens duplicados de um iterável
set([1,2,3,1,3,4]) # Resulta em {1,2,3,4}
set("Python") # Resulta em {'P','y','t','h','o','n'}
set(('a','b','c','a')) # Resulta em {'a','b','c'}
linguagens = {"Python","Java","C","C++"} # Resulta em {'Python','Java','C','C++'}

#Conjuntos em python não suportam indexação e nem fatiamento, caso queira acessar os seus valores é necessário converter o conjunto para lista
numeros = { 1,2,3,4}
numeros = list(numeros)
print(numeros[0]) # Resulta em 1

carros = {"Fusca","Gol","Celta"}

for indice, carro in enumerate(carros):
    print(indice, carro)


conjunto_a = {1,2,3,4,5}
conjunto_b = {4,5,6,7,8}
conjunto_a.union(conjunto_b) # Resulta em {1,2,3,4,5,6,7,8}
conjunto_a.intersection(conjunto_b) # Resulta em {4,5}
conjunto_a.difference(conjunto_b) # Resulta em {1,2,3}
conjunto_a.symmetric_difference(conjunto_b) # Resulta em {1,2,3,6,7,8}
conjunto_a.issubset(conjunto_b) # Resulta em False
conjunto_a.issuperset(conjunto_b) # Resulta em False
conjunto_a.isdisjoint(conjunto_b) # Resulta em False
conjunto_a.add(6) # Adiciona o número 6 ao conjunto
conjunto_a.remove(6) # Remove o número 6 do conjunto
conjunto_a.discard(6) # Remove o número 6 do conjunto
conjunto_a.pop() # Remove um elemento aleatório do conjunto
conjunto_a.clear() # Remove todos os elementos do conjunto
# --------------------------------------------------------------------------
Dicionários
# - Um dicionário é uma coleção desordenada de itens. Os dicionários são usados para armazenar vários itens em uma única variável.
# - Um dicionário é uma coleção desordenada, mutável e indexada. Em Python, os dicionários são escritos com chaves e têm chaves e valores.
pessoa = {
    "nome": "Wesley",
    "idade": 20,
    "cidade": "São Paulo"
}
pessoa = dict(nome="Wesley", idade=20, cidade="São Paulo")
pessoa["nome"] = "Wesley" # Altera o valor do item com a chave "nome"
pessoa["cidade"] = "São Paulo" # Adiciona um novo item ao dicionário
pessoa["sobrenome"] = "Santos" # Adiciona um novo item ao dicionário
pessoa["idade"] # Resulta em 20
pessoa.get("idade") # Resulta em 20
pessoa["cidade"] # Resulta em "São Paulo"
pessoa.get("cidade") # Resulta em "São Paulo"
pessoa["sobrenome"] # Resulta em "Santos"
pessoa.get("sobrenome") # Resulta em "Santos"

pessoa["telefone"] = "11999999999" # Adiciona um novo item ao dicionário
pessoa.keys() # Resulta em ["nome","idade","cidade"]
pessoa.values() # Resulta em ["Wesley",20,"São Paulo"]
pessoa.items() # Resulta em [("nome","Wesley"),("idade",20),("cidade","São Paulo")]
pessoa.pop("cidade") # Remove o item com a chave "cidade"
pessoa.popitem() # Remove o último item inserido
pessoa.update({"cidade": "São Paulo"}) # Adiciona um novo item ao dicionário
pessoa["cidade"] = "São Paulo" # Adiciona um novo item ao dicionário
pessoa.clear() # Remove todos os itens do dicionário

//Acessando campos do dicionario
pessoa["nome"]
pessoa["cidade"]
pessoa["sobrenome"]
pessoa["idade"]
pessoa["telefone"]

Dicionários aninhados podem armazenar qualquer tipo de objeto Python como valor, desde que a chave para esse valor seja um objeto imutavel como (strings e numeros)
pessoa = {
    "nome": "Wesley",
    "idade": 20,
    "cidade": "São Paulo",
    "telefones": {
        "celular": "11999999999",
        "fixo": "1122222222"
    }
}
pessoa["telefones"]["celular"] # Resulta em "11999999999"
metodos da classe dict
pessoa = {
    "nome": "Wesley",
    "idade": 20,
    "cidade": "São Paulo"
}
pessoa.copy() # Retorna uma cópia do dicionário
pessoa.fromkeys(["nome","idade","cidade"]) # Retorna um dicionário com as chaves e valores especificados
pessoa.get("nome") # Retorna o valor do item com a chave "nome"
pessoa.items() # Retorna uma lista contendo uma tupla para cada par chave-valor
pessoa.keys() # Retorna uma lista contendo as chaves do dicionário
pessoa.pop("cidade") # Remove o item com a chave "cidade"
pessoa.popitem() # Remove o último item inserido
pessoa.setdefault("cidade", "São Paulo") # Retorna o valor do item com a chave "cidade", se a chave não existir, insere a chave com o valor especificado
pessoa.update({"cidade": "São Paulo"}) # Adiciona um novo item ao dicionário
pessoa.values() # Retorna uma lista contendo os valores do dicionário
pessoa.clear() # Remove todos os itens do dicionário
Considere o dicionário: carro = {"marca": "Fiat", "modelo": "palio", "placa": "ABD-9826"}. Qual será o retorno do código: carro.get("motor")?
# - O método get() retorna o valor do item com a chave especificada. Se a chave não existir, ele retorna None.
# --------------------------------------------------------------------------
Funções
# - Uma função é um bloco de código que só é executado quando é chamado. Você pode passar dados, conhecidos como parâmetros, para uma função. Uma função pode retornar dados como resultado.
# 
def saudacao():
    print("Olá, mundo!")
saudacao() # Resulta em "Olá, mundo!"

def saudacao(nome):
    print(f"Olá, {nome}!")

saudacao("Wesley") # Resulta em "Olá, Wesley!"

def saudacao(nome="mundo"):
    print(f"Olá, {nome}!")

saudacao() # Resulta em "Olá, mundo!"

def saudacao(nome="mundo"):
    return f"Olá, {nome}!"

print(saudacao()) # Resulta em "Olá, mundo!"

def saudacao(nome="mundo"):
    return f"Olá, {nome}!"

mensagem = saudacao()

print(mensagem) # Resulta em "Olá, mundo!"

def saudacao(nome="mundo"):
    return f"Olá, {nome}!"

mensagem = saudacao("Wesley")

print(mensagem) # Resulta em "Olá, Wesley!"

def saudacao(nome="mundo"):
    return f"Olá, {nome}!"

mensagem = saudacao(nome="Wesley")

print(mensagem) # Resulta em "Olá, Wesley!"

def saudacao(*nomes):
    for nome in nomes:
        print(f"Olá, {nome}!")

saudacao("Wesley","Maria","José") # Resulta em "Olá, Wesley!", "Olá, Maria!", "Olá, José!"

def saudacao(**nomes):
    for nome in nomes:
        print(f"Olá, {nome}!")

saudacao(nome="Wesley",idade=20,cidade="São Paulo") # Resulta em "Olá, nome!", "Olá, idade!", "Olá, cidade!"

def saudacao(nome,idade):
    print(f"Olá, {nome}! Você tem {idade} anos.")

saudacao(idade=20,nome="Wesley") # Resulta em "Olá, Wesley! Você tem 20 anos!"

def saudacao(nome,idade):
    print(f"Olá, {nome}! Você tem {idade} anos.")

saudacao("Wesley",20) # Resulta em "Olá, Wesley! Você tem 20 anos!"





